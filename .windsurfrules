# ResellersConnect

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
Create a SaaS platform for resellers to simplify inventory management, automate crosslisting, and synchronize updates across multiple resale platforms such as eBay, Poshmark, Mercari, Facebook Marketplace, and Depop.

## What are we building?
- [ whatwearebuilding.md ](whatwearebuilding.md)

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure repository files as follows:

```
├── app/                        # Next.js App Router pages
│   ├── (auth)/                # Authentication related routes
│   ├── (dashboard)/           # Dashboard related routes
│   ├── (marketing)/           # Marketing/landing pages
│   ├── api/                   # API routes
│   └── layout.tsx             # Root layout
├── components/                # Shared React components
│   ├── auth/                  # Authentication related components
│   ├── dashboard/             # Dashboard specific components
│   ├── forms/                 # Form components
│   ├── layout/                # Layout components
│   ├── listings/             # Listing related components
│   ├── ui/                   # UI components (shadcn)
│   └── shared/               # Shared components
├── hooks/                    # Custom React hooks
│   ├── use-auth.ts
│   ├── use-listings.ts
│   └── use-settings.ts
├── lib/                      # Shared libraries
│   ├── auth/                 # Authentication utilities
│   ├── db/                   # Database utilities
│   └── api/                  # API utilities
├── types/                    # TypeScript types
│   ├── auth.ts
│   ├── listings.ts
│   └── api.ts
├── utils/                    # Helper functions
│   ├── formatting.ts
│   ├── validation.ts
│   └── api-helpers.ts
├── public/                   # Static files
│   ├── images/
│   └── fonts/
├── styles/                   # Global styles
│   └── globals.css
├── config/                   # Configuration files
│   ├── site.ts
│   └── dashboard.ts
├── prisma/                   # Database schema and migrations
│   └── schema.prisma
├── extension/               # Chrome Extension
│   ├── src/
│   │   ├── background/     # Service worker scripts
│   │   ├── content/        # Content scripts
│   │   ├── popup/         # Extension popup UI
│   │   ├── options/       # Extension options page
│   │   ├── components/    # Extension-specific components
│   │   ├── hooks/         # Extension-specific hooks
│   │   ├── utils/         # Extension utilities
│   │   ├── lib/          # Extension libraries
│   │   ├── types/        # Extension types
│   │   └── storage/      # Chrome storage utilities
│   ├── public/           # Extension static files
│   └── manifest.json     # Extension manifest
└── shared/               # Shared between web app and extension
    ├── types/           # Shared TypeScript types
    └── utils/           # Shared utilities

# Configuration Files
├── .env                # Environment variables
├── .env.template       # Environment variables template
├── .eslintrc.json     # ESLint configuration
├── .gitignore         # Git ignore rules
├── next.config.ts     # Next.js configuration
├── package.json       # Project dependencies
├── postcss.config.js  # PostCSS configuration
├── tailwind.config.ts # Tailwind CSS configuration
├── tsconfig.json      # TypeScript configuration
└── README.md         # Project documentation
```

## Tech Stack
- React
- TypeScript
- Tailwind CSS
- Shadcn UI
- Express.js
- Next.js
- Supabase
- Stripe
- Clerk

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions

## State Management
- Use React Context for global state when needed
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- Follow Material Design guidelines for Chrome extensions
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog
